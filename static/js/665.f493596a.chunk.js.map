{"version":3,"file":"static/js/665.f493596a.chunk.js","mappings":"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","sources":["components/buttons/Button.tsx","components/buttons/ButtonDelete.tsx","components/buttons/ButtonEdit.tsx","components/forms/ContactEdit.tsx","components/contact-list/ContactList.tsx","components/forms/Contact.tsx","components/forms/Filter.tsx","pages/Contacts.tsx"],"sourcesContent":["export enum ButtonType {\n  Submit = 'submit',\n  Button = 'button',\n  Reset = 'reset',\n}\n\nconst Button = ({ title, type }: { title: string; type: ButtonType }) => {\n  return (\n    <button className='bg-black px-4 py-2 text-white hover:text-[#c1c1c1]' type={type}>\n      {title}\n    </button>\n  );\n};\n\nexport default Button;\n","import { FaWindowClose } from 'react-icons/fa';\nimport { UpdateType, updateUser } from 'redux/slice/user-slice';\nimport { useAppDispatch } from 'redux/store';\nimport { deleteContactThunk } from 'redux/thunk/contacts-thunk';\n\nconst ButtonDelete = ({ id }: { id: string }) => {\n  const dispatch = useAppDispatch();\n  return (\n    <button\n      type='button'\n      onClick={() => {\n        dispatch(deleteContactThunk(id));\n        dispatch(updateUser(UpdateType.Decrement));\n      }}\n    >\n      <FaWindowClose className='h-[40px] w-[40px] hover:fill-[#0faf1f]' />\n    </button>\n  );\n};\n\nexport default ButtonDelete;\n","import { IContact } from 'types/contacts-types';\n\nconst ButtonEdit = ({\n  editContact,\n  contact,\n}: {\n  editContact: (contact: IContact) => void;\n  contact: IContact;\n}) => {\n  return (\n    <button\n      type='button'\n      className='h-[36px] rounded bg-black px-4 text-[16px] text-white hover:bg-[#c1c1c1] hover:text-black'\n      onClick={() => editContact(contact)}\n    >\n      Edit\n    </button>\n  );\n};\n\nexport default ButtonEdit;\n","import { useState, FormEvent, ChangeEvent } from 'react';\nimport Button, { ButtonType } from 'components/buttons/Button';\nimport { IContact } from 'types/contacts-types';\nimport { useAppDispatch } from 'redux/store';\nimport { editContactThunk } from 'redux/thunk/contacts-thunk';\n\nconst ContactEdit = ({ contact, onClose }: { contact: IContact; onClose: () => void }) => {\n  const dispatch = useAppDispatch();\n  const [form, setForm] = useState<IContact>(contact);\n\n  const handleInput = (e: ChangeEvent) => {\n    const { name, value }: { name: string; value: string } = e.target as HTMLInputElement;\n    setForm((prev) => {\n      return { ...prev, [name]: value };\n    });\n  };\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    setForm({ name: '', number: '', id: '' });\n    dispatch(editContactThunk({ ...form }));\n    onClose();\n  };\n  const onCancel = () => {\n    setForm({ name: '', number: '', id: '' });\n    onClose();\n  };\n\n  return (\n    <div className='fixed left-0 top-0 h-[100%] w-[100%] backdrop-blur-sm'>\n      <div className='absolute left-[50%] top-[50%] flex w-[560px] translate-x-[-50%] translate-y-[-50%] flex-col items-center justify-center rounded border-[1px] border-black bg-[#c1c1c1] p-4'>\n        <h3>\n          <b>Edit contact</b>\n        </h3>\n        <form\n          className='flex w-[100%] flex-col items-center justify-center gap-3 p-1'\n          onSubmit={handleSubmit}\n        >\n          <label className='flex w-[100%] flex-col items-center'>\n            Name:\n            <input\n              onChange={handleInput}\n              className='w-[90%] p-1'\n              type='text'\n              name='name'\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={form.name}\n            />\n          </label>\n          <label className='flex w-[100%] flex-col items-center'>\n            Number:\n            <input\n              onChange={handleInput}\n              className='w-[90%] p-1'\n              type='tel'\n              name='number'\n              pattern='\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}'\n              title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n              required\n              value={form.number}\n            />\n          </label>\n          <div className='flex justify-center gap-4'>\n            <Button type={ButtonType.Submit} title='Edit contact' />\n            <button\n              type='button'\n              onClick={onCancel}\n              className='rounded border-[1px] border-black px-4 hover:bg-white'\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ContactEdit;\n","import { useState } from 'react';\nimport ButtonDelete from 'components/buttons/ButtonDelete';\nimport ButtonEdit from 'components/buttons/ButtonEdit';\nimport ContactEdit from 'components/forms/ContactEdit';\nimport { useFilterItems } from 'redux/selectors';\nimport { IContact } from 'types/contacts-types';\nimport Loader from 'components/loader/Loader';\n\nconst ContactList = () => {\n  const contacts = useFilterItems();\n  const [openForm, setOpenForm] = useState<{ isOpen: boolean; contact: IContact }>({\n    isOpen: false,\n    contact: { name: '', number: '', id: '' },\n  });\n\n  const editContact = (contact: IContact) => {\n    setOpenForm((prev) => ({ isOpen: !prev.isOpen, contact }));\n  };\n\n  const closeFormEdit = () => {\n    setOpenForm((prev) => ({ isOpen: !prev.isOpen, contact: { name: '', number: '', id: '' } }));\n  };\n\n  return (\n    <>\n      {contacts.isLoading && <Loader />}\n      <div className='flex w-[100%] flex-col items-center justify-center rounded border-[1px] border-black p-4'>\n        {openForm.isOpen && <ContactEdit contact={openForm.contact} onClose={closeFormEdit} />}\n        {contacts?.items?.length !== 0 ? (\n          <ul className='flex w-[90%] flex-col gap-3'>\n            {contacts.items.map((contact) => (\n              <li\n                key={contact.id}\n                className='group/item flex w-[100%] animate-translate-down justify-between rounded p-2 shadow hover:bg-slate-100'\n              >\n                <div className='flex flex-col'>\n                  <span>Name: {contact.name}</span>\n                  <span>Number: {contact.number}</span>\n                </div>\n                <div className='group/edit invisible flex animate-[translate-down] items-center gap-3 group-hover/item:visible'>\n                  <ButtonEdit editContact={editContact} contact={contact} />\n                  <ButtonDelete id={contact.id} />\n                </div>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <span>\n            <b>Empty!</b>\n          </span>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useState, ChangeEvent, FormEvent } from 'react';\nimport Button, { ButtonType } from 'components/buttons/Button';\nimport { IContactForm } from 'types/contacts-types';\nimport { useAppDispatch } from 'redux/store';\nimport { useContacts } from 'redux/selectors';\nimport { addContactThunk } from 'redux/thunk/contacts-thunk';\nimport { UpdateType, updateUser } from 'redux/slice/user-slice';\n\nconst ContactForm = () => {\n  const [form, setForm] = useState<IContactForm>({ name: '', number: '' });\n  const dispatch = useAppDispatch();\n\n  const { items: contacts } = useContacts();\n\n  const handleInput = (e: ChangeEvent) => {\n    const { name, value }: { name: string; value: string } = e.target as HTMLInputElement;\n    setForm((prev) => {\n      return { ...prev, [name]: value };\n    });\n  };\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    setForm({ name: '', number: '' });\n    if (contacts.some((cont) => cont.name.toLowerCase() === form.name.toLowerCase())) {\n      alert(`${form.name} is arleady in contacts.`);\n      return;\n    }\n    dispatch(addContactThunk({ ...form }));\n    dispatch(updateUser(UpdateType.Increment));\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className='flex w-[100%] flex-col items-center justify-center gap-3 rounded border-[1px] border-black p-5'\n    >\n      <label className='flex w-[50%] flex-col gap-1'>\n        Name:\n        <input\n          onChange={handleInput}\n          type='text'\n          name='name'\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={form.name}\n        />\n      </label>\n      <label className='flex w-[50%] flex-col gap-1'>\n        Number:\n        <input\n          onChange={handleInput}\n          type='tel'\n          name='number'\n          pattern='\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}'\n          title='Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n          required\n          value={form.number}\n        />\n      </label>\n      <Button type={ButtonType.Submit} title='Add contact' />\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import { ChangeEvent, useEffect } from 'react';\nimport { changeFilter } from 'redux/slice/filter-slice';\nimport { useAppDispatch } from 'redux/store';\n\nconst Filter = () => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    return () => {\n      dispatch(changeFilter(''));\n    };\n  }, []);\n\n  const onChangeFilter = (e: ChangeEvent) => {\n    const { value }: { value: string } = e.target as HTMLInputElement;\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <div className='flex w-[100%] flex-col items-center justify-center rounded bg-black'>\n      <label className='m-2 flex w-[50%] flex-col items-center gap-2 text-white'>\n        Search contact\n        <input\n          className='w-[100%] text-black'\n          onChange={onChangeFilter}\n          type='text'\n          name='filter'\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n","import ContactList from 'components/contact-list/ContactList';\nimport ContactForm from 'components/forms/Contact';\nimport Filter from 'components/forms/Filter';\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <h2>\n        <b>Contacts</b>\n      </h2>\n      <ContactForm />\n      <Filter />\n      <ContactList />;\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ButtonType","_ref","title","type","_jsx","className","children","id","dispatch","useAppDispatch","onClick","deleteContactThunk","updateUser","UpdateType","Decrement","FaWindowClose","editContact","contact","onClose","_useState","useState","_useState2","_slicedToArray","form","setForm","handleInput","e","_ref2","target","name","value","prev","_objectSpread","_defineProperty","_jsxs","onSubmit","preventDefault","number","editContactThunk","onChange","pattern","required","Button","Submit","_contacts$items","contacts","useFilterItems","isOpen","openForm","setOpenForm","_Fragment","isLoading","Loader","ContactEdit","items","length","map","ButtonEdit","ButtonDelete","useContacts","some","cont","toLowerCase","alert","concat","addContactThunk","Increment","useEffect","changeFilter","ContactForm","Filter","ContactList"],"sourceRoot":""}