{"version":3,"file":"static/js/733.16be6e0a.chunk.js","mappings":"0LAAYA,EAAU,SAAVA,GAAU,OAAVA,EAAU,gBAAVA,EAAU,gBAAVA,EAAU,cAAVA,CAAU,MActB,IARe,SAAHC,GAA8D,IAAxDC,EAAKD,EAALC,MAAOC,EAAIF,EAAJE,KACvB,OACEC,EAAAA,EAAAA,KAAA,UAAQC,UAAU,qDAAqDF,KAAMA,EAAKG,SAC/EJ,GAGP,C,0KCoDA,EAxDqB,WACnB,IAAMK,GAAOC,EAAAA,EAAAA,MACbC,GAAwBC,EAAAA,EAAAA,UAAwB,CAAEC,KAAM,GAAIC,MAAO,GAAIC,SAAU,KAAKC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA/EO,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACdI,GAAWC,EAAAA,EAAAA,MAEXC,EAAc,SAACC,GACnB,IAAApB,EAAwBoB,EAAEC,OAAlBX,EAAIV,EAAJU,KAAMY,EAAKtB,EAALsB,MACdN,GAAQ,SAACO,GACP,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYD,GAAI,IAAAE,EAAAA,EAAAA,GAAA,GAAGf,EAAOY,GAC5B,GACF,EAQA,OACEI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAtB,SAAA,CACGC,EAAKsB,YAAazB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,KAC1BH,EAAAA,EAAAA,MAAA,QAAMtB,UAAU,sBAAsB0B,SATzB,SAACV,GAChBA,EAAEW,iBACFd,GAASe,EAAAA,EAAAA,IAAkBjB,IAC3BC,EAAQ,CAAEN,KAAM,GAAIC,MAAO,GAAIC,SAAU,IAC3C,EAK6DP,SAAA,EACvDqB,EAAAA,EAAAA,MAAA,SAAOtB,UAAU,gBAAeC,SAAA,CAAC,SAE/BF,EAAAA,EAAAA,KAAA,SACE8B,SAAUd,EACVjB,KAAK,OACLQ,KAAK,OACLwB,QAAQ,2HACRjC,MAAM,yIACNkC,UAAQ,EACRb,MAAOP,EAAKL,WAGhBgB,EAAAA,EAAAA,MAAA,SAAOtB,UAAU,gBAAeC,SAAA,CAAC,UAE/BF,EAAAA,EAAAA,KAAA,SAAO8B,SAAUd,EAAajB,KAAK,QAAQQ,KAAK,QAAQyB,UAAQ,EAACb,MAAOP,EAAKJ,YAE/Ee,EAAAA,EAAAA,MAAA,SAAOtB,UAAU,gBAAeC,SAAA,CAAC,YAE/BF,EAAAA,EAAAA,KAAA,SACE8B,SAAUd,EACVjB,KAAK,WACLQ,KAAK,WACL0B,UAAW,EACXC,UAAW,GACXF,UAAQ,EACRb,MAAOP,EAAKH,eAGhBT,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,CAACpC,KAAMH,EAAAA,EAAWwC,OAAQtC,MAAM,cAI/C,ECjDA,EAXqB,WACnB,OACEyB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAtB,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,gBAELF,EAAAA,EAAAA,KAACqC,EAAY,MAGnB,C","sources":["components/buttons/Button.tsx","components/forms/Register.tsx","pages/Register.tsx"],"sourcesContent":["export enum ButtonType {\n  Submit = 'submit',\n  Button = 'button',\n  Reset = 'reset',\n}\n\nconst Button = ({ title, type }: { title: string; type: ButtonType }) => {\n  return (\n    <button className='bg-black px-4 py-2 text-white hover:text-[#c1c1c1]' type={type}>\n      {title}\n    </button>\n  );\n};\n\nexport default Button;\n","import Button, { ButtonType } from 'components/buttons/Button';\nimport Loader from 'components/loader/Loader';\nimport { ChangeEvent, FormEvent, useState } from 'react';\nimport { useAuth } from 'redux/selectors';\nimport { useAppDispatch } from 'redux/store';\nimport { authRegisterThunk } from 'redux/thunk/auth-thunk';\nimport { IRegisterForm } from 'types/auth-types';\n\nconst RegisterForm = () => {\n  const auth = useAuth();\n  const [form, setForm] = useState<IRegisterForm>({ name: '', email: '', password: '' });\n  const dispatch = useAppDispatch();\n\n  const handleInput = (e: ChangeEvent) => {\n    const { name, value } = e.target as HTMLInputElement;\n    setForm((prev) => {\n      return { ...prev, [name]: value };\n    });\n  };\n\n  const onSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    dispatch(authRegisterThunk(form));\n    setForm({ name: '', email: '', password: '' });\n  };\n\n  return (\n    <>\n      {auth.isLoading && <Loader />}\n      <form className='flex flex-col gap-2' onSubmit={onSubmit}>\n        <label className='flex flex-col'>\n          Name:\n          <input\n            onChange={handleInput}\n            type='text'\n            name='name'\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={form.name}\n          />\n        </label>\n        <label className='flex flex-col'>\n          Email:\n          <input onChange={handleInput} type='email' name='email' required value={form.email} />\n        </label>\n        <label className='flex flex-col'>\n          Password\n          <input\n            onChange={handleInput}\n            type='password'\n            name='password'\n            minLength={7}\n            maxLength={32}\n            required\n            value={form.password}\n          />\n        </label>\n        <Button type={ButtonType.Submit} title='Send' />\n      </form>\n    </>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/forms/Register';\n\nconst RegisterPage = () => {\n  return (\n    <>\n      <h2>\n        <b>Register</b>\n      </h2>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["ButtonType","_ref","title","type","_jsx","className","children","auth","useAuth","_useState","useState","name","email","password","_useState2","_slicedToArray","form","setForm","dispatch","useAppDispatch","handleInput","e","target","value","prev","_objectSpread","_defineProperty","_jsxs","_Fragment","isLoading","Loader","onSubmit","preventDefault","authRegisterThunk","onChange","pattern","required","minLength","maxLength","Button","Submit","RegisterForm"],"sourceRoot":""}